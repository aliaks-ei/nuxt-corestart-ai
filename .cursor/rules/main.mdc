---
description: 
globs: 
alwaysApply: true
---
# Nuxt Corestart AI - Development Guidelines

You are an expert in Nuxt 3, Vue.js 3, TypeScript, Supabase, and modern frontend development.

## Technologies Used

### Frontend Stack
- **Nuxt 3** (v3.17.5) - Vue.js meta-framework for full-stack applications
- **Vue 3** (v3.5.16) - Progressive JavaScript framework
- **TypeScript** (v5.8.3) - Type-safe JavaScript development
- **Nuxt UI** (v3.1.3) - Beautiful and accessible UI components
- **Tailwind CSS** - Utility-first CSS framework (via Nuxt UI)
- **Nuxt Icon** (v1.13.0) - Icon management with Heroicons
- **Nuxt Image** (v1.10.0) - Optimized image handling
- **Nuxt Fonts** (v0.11.4) - Font optimization

### Backend & Services
- **Supabase** - Backend-as-a-Service for authentication and database
- **OpenAI API** (v5.3.0) - AI chat integration with GPT-4o-mini
- **Server-Sent Events (SSE)** - Real-time streaming for AI responses

### Development Tools
- **ESLint** (v9.29.0) with Nuxt ESLint config - Code linting
- **Valibot** (v1.1.0) - Schema validation
- **Nuxt Test Utils** (v3.19.1) - Testing utilities

## Project Architecture

### Directory Structure
```
├── components/          # Vue components (auto-imported)
├── composables/         # Custom composables (auto-imported)
├── middleware/          # Route middleware
├── pages/              # File-based routing
├── server/             # Server-side code
│   ├── api/           # API endpoints
│   └── utils/         # Server utilities
├── types/             # TypeScript type definitions
├── assets/            # Static assets and CSS
└── public/            # Public static files
```

### Design Patterns

#### 1. Composables Pattern
- **Location**: `composables/` directory
- **Auto-import**: All composables are automatically imported
- **Naming**: Use `use` prefix (e.g., `useOpenAI`)
- **Purpose**: Encapsulate reusable business logic and API interactions

#### 2. Server API Pattern
- **Location**: `server/api/` directory
- **File naming**: Use `.post.ts`, `.get.ts` etc. for HTTP methods
- **Structure**: Group related endpoints in subdirectories
- **Error handling**: Use `createError()` for consistent error responses

#### 3. Middleware Pattern
- **Location**: `middleware/` directory
- **Types**: Route middleware for authentication and authorization
- **Naming**: Descriptive names (`auth.ts`, `guest.ts`)

#### 4. Type-First Development
- **Location**: `types/` directory
- **Organization**: Group types by feature/domain
- **Sharing**: Types shared between client and server

## Code Conventions

### Naming Conventions
- **Files**: kebab-case (`ai-chat.vue`, `use-openai.ts`)
- **Components**: PascalCase in templates (`<AppHeader />`)
- **Variables/Functions**: camelCase (`userInput`, `sendMessage`)
- **Types/Interfaces**: PascalCase (`ChatMessage`, `TokenUsage`)
- **Constants**: SCREAMING_SNAKE_CASE for environment variables

### Vue/Nuxt Conventions
- **Script Setup**: Always use `<script setup lang="ts">`
- **Auto-imports**: Leverage Nuxt's auto-import for composables, components, and utilities
- **Reactive State**: Use `ref()` and `reactive()` appropriately
- **Page Metadata**: Use `definePageMeta()` for middleware and other page config

### TypeScript Usage
- **Strict Types**: Always define proper interfaces and types
- **Type Imports**: Use `import type` for type-only imports
- **Generic Types**: Use generics for reusable type definitions
- **Error Handling**: Type error objects properly

### Component Structure
```vue
<template>
  <!-- Template content -->
</template>

<script setup lang="ts">
// Imports (types first, then regular imports)
import type { ComponentType } from '~/types/component'

// Page metadata (if applicable)
definePageMeta({
  middleware: 'auth'
})

// Reactive state
const state = ref()

// Composables
const { method } = useComposable()

// Methods
const handleAction = () => {
  // Implementation
}
</script>
```

## Best Practices

### Authentication & Security
- **Middleware Protection**: Use `auth` middleware for protected routes
- **Guest Routes**: Use `guest` middleware for login/register pages
- **API Security**: Keep sensitive keys server-side only
- **User State**: Use `useSupabaseUser()` for reactive user state

### API Integration
- **Composables**: Wrap API calls in composables for reusability
- **Error Handling**: Implement comprehensive error handling with user feedback
- **Loading States**: Always provide loading indicators for async operations
- **Type Safety**: Define request/response types for all API calls

### UI/UX Patterns
- **Nuxt UI Components**: Prefer Nuxt UI components over custom implementations
- **Responsive Design**: Mobile-first approach with Tailwind classes
- **Dark Mode**: Support both light and dark themes
- **Accessibility**: Use semantic HTML and proper ARIA attributes

### State Management
- **Local State**: Use `ref()` and `reactive()` for component state
- **Global State**: Use composables for shared state across components
- **Persistence**: Leverage Supabase for data persistence
- **Real-time**: Use SSE for streaming data (AI chat)

### Performance
- **Auto-imports**: Leverage Nuxt's auto-import system
- **Code Splitting**: Use dynamic imports for large components
- **Image Optimization**: Use `<NuxtImg>` for optimized images
- **Font Loading**: Use Nuxt Fonts module for font optimization

## Implementation Patterns

### AI Chat Integration
```typescript
// Composable pattern for API integration
export const useOpenAI = () => {
  const sendChatMessage = async (messages, options) => {
    // Implementation with proper error handling
  }
  
  const sendStreamingChatMessage = async (messages, options, onChunk) => {
    // SSE implementation for real-time responses
  }
  
  return { sendChatMessage, sendStreamingChatMessage }
}
```

### Server API Pattern
```typescript
// server/api/endpoint.post.ts
export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    
    // Validation
    if (!body.required) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Required field missing'
      })
    }
    
    // Business logic
    const result = await processRequest(body)
    
    return { success: true, data: result }
  } catch (error) {
    // Consistent error handling
    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.message || 'Internal server error'
    })
  }
})
```

### Middleware Pattern
```typescript
// middleware/auth.ts
export default defineNuxtRouteMiddleware(() => {
  const user = useSupabaseUser()
  
  if (!user.value) {
    return navigateTo('/login')
  }
})
```

## Anti-Patterns to Avoid

### ❌ Don't Do
- **Manual Imports**: Don't manually import auto-imported composables/components
- **Inline Styles**: Avoid inline styles; use Tailwind classes
- **Direct API Calls**: Don't call APIs directly in components; use composables
- **Hardcoded Values**: Avoid hardcoding API endpoints or configuration
- **Mixed Concerns**: Don't mix business logic with presentation logic
- **Untyped Code**: Avoid `any` types; always define proper interfaces

### ❌ Legacy Patterns
- **Options API**: Use Composition API with `<script setup>`
- **Manual State Management**: Don't implement custom state management; use composables
- **Custom HTTP Client**: Use `$fetch` instead of axios or other HTTP clients
- **Manual Route Guards**: Use Nuxt middleware instead of Vue Router guards

## Environment Configuration

### Required Environment Variables
```bash
# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key_here

# Supabase Configuration
SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_SUPABASE_KEY
```

### Runtime Config Pattern
```typescript
// nuxt.config.ts
export default defineNuxtConfig({
  runtimeConfig: {
    // Private keys (server-side only)
    openaiApiKey: process.env.OPENAI_API_KEY,
    
    public: {
      // Public keys (client-side accessible)
      // Add public config here
    }
  }
})
```

## Testing Guidelines

- **Test Utils**: Use `@nuxt/test-utils` for Nuxt-specific testing
- **Component Testing**: Test components in isolation
- **API Testing**: Test server endpoints with proper mocking
- **Type Testing**: Ensure TypeScript compilation passes

## Deployment Considerations

- **Environment Variables**: Ensure all required env vars are set in production
- **Build Process**: Use `npm run build` for production builds
- **Static Generation**: Consider `nuxt generate` for static deployment
- **Server Requirements**: Ensure Node.js compatibility for server-side features

## Summary

This project follows modern Nuxt 3 best practices with a focus on:

1. **Type Safety**: Full TypeScript integration with proper type definitions
2. **Developer Experience**: Auto-imports, hot reloading, and excellent tooling
3. **Performance**: Optimized builds, code splitting, and efficient asset handling
4. **Security**: Server-side API key management and proper authentication
5. **Maintainability**: Clean architecture, consistent patterns, and comprehensive documentation

When contributing to this project, always refer to this guide to ensure consistency and maintain the high quality standards established in the codebase.
